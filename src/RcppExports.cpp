// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// binomial_mixture_log_likelihood
double binomial_mixture_log_likelihood(const Rcpp::NumericVector x, const Rcpp::NumericVector n, double p1, double p2, double theta1);
RcppExport SEXP _scMitoMut_binomial_mixture_log_likelihood(SEXP xSEXP, SEXP nSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP theta1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_mixture_log_likelihood(x, n, p1, p2, theta1));
    return rcpp_result_gen;
END_RCPP
}
// binomial_log_likelihood
double binomial_log_likelihood(const Rcpp::NumericVector x, const Rcpp::NumericVector n, double p);
RcppExport SEXP _scMitoMut_binomial_log_likelihood(SEXP xSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_log_likelihood(x, n, p));
    return rcpp_result_gen;
END_RCPP
}
// em_bm
Rcpp::List em_bm(const Rcpp::NumericVector x, const Rcpp::NumericVector n, double p1, double p2, double theta1, int max_iter, double tol);
RcppExport SEXP _scMitoMut_em_bm(SEXP xSEXP, SEXP nSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP theta1SEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(em_bm(x, n, p1, p2, theta1, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// log_n_choose_k
double log_n_choose_k(long n, long k);
RcppExport SEXP _scMitoMut_log_n_choose_k(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type n(nSEXP);
    Rcpp::traits::input_parameter< long >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(log_n_choose_k(n, k));
    return rcpp_result_gen;
END_RCPP
}
// log_beta_binomial_pmf
long double log_beta_binomial_pmf(const double a, const double b, const double x, const double n);
RcppExport SEXP _scMitoMut_log_beta_binomial_pmf(SEXP aSEXP, SEXP bSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(log_beta_binomial_pmf(a, b, x, n));
    return rcpp_result_gen;
END_RCPP
}
// pbetabinom
Rcpp::NumericVector pbetabinom(const Rcpp::NumericVector x, const Rcpp::NumericVector n, const double a, const double b);
RcppExport SEXP _scMitoMut_pbetabinom(SEXP xSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(pbetabinom(x, n, a, b));
    return rcpp_result_gen;
END_RCPP
}
// mle_bb
Rcpp::List mle_bb(Rcpp::IntegerVector x, Rcpp::IntegerVector n, int max_iter, double tol);
RcppExport SEXP _scMitoMut_mle_bb(SEXP xSEXP, SEXP nSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(mle_bb(x, n, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scMitoMut_binomial_mixture_log_likelihood", (DL_FUNC) &_scMitoMut_binomial_mixture_log_likelihood, 5},
    {"_scMitoMut_binomial_log_likelihood", (DL_FUNC) &_scMitoMut_binomial_log_likelihood, 3},
    {"_scMitoMut_em_bm", (DL_FUNC) &_scMitoMut_em_bm, 7},
    {"_scMitoMut_log_n_choose_k", (DL_FUNC) &_scMitoMut_log_n_choose_k, 2},
    {"_scMitoMut_log_beta_binomial_pmf", (DL_FUNC) &_scMitoMut_log_beta_binomial_pmf, 4},
    {"_scMitoMut_pbetabinom", (DL_FUNC) &_scMitoMut_pbetabinom, 4},
    {"_scMitoMut_mle_bb", (DL_FUNC) &_scMitoMut_mle_bb, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_scMitoMut(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
